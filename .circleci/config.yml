version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      to:
        default: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
        type: string   
    steps:
      - revert-migrations:
          to: <<parameters.to>>
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-<<parameters.to>>; then
              aws s3 rm s3://udapeople-<<parameters.to>> --recursive
            fi
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.to>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.to>>
      

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      to:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            cd backend
            npm run migrations:revert

orbs: 
  slack: circleci/slack@4.10.1

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build front-end project
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: build back-end project
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      - restore_cache:
          keys: [test-frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend-build]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Audit frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Audit backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

#infrastructure 
  deploy-infrastructure:
    docker:
      - image: python:3.9-bullseye
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install ansible -y
            apt-get install awscli -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd .circleci/ansible
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filter "Name=tag:project,Values=udapeople" --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            echo Stack names: "${STACKS[@]}"
            echo "${OldWorkflowID} > ~/project/.circleci/ansible/oldWorkflowId.prime
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            - project/.circleci/ansible/oldWorkflowId.prime
      - destroy-environment:
          to: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.9-bullseye
    steps:
      - checkout
      - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
            fingerprints: ["ad:75:d1:ff:67:18:7e:07:58:a2:fd:50:27:c5:ad:0b"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt-get install ansible -y
            apt-get install awscli -y
            
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          to: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: python:3.9-bullseye
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install ansible -y
            apt-get install awscli -y
            apt-get install nodejs -y
            apt-get install npm -y
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat  ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |
            if grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt
            then
                curl --insecure https://kvdb.io/38MB9yW4c1rBanS5NDdv4z/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          to: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: python:3.9-bullseye
    steps:
      - checkout
      - attach_workspace:
          at: ~/ 
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install ansible -y
            apt-get install awscli -y
            apt-get install nodejs -y
            apt-get install npm -y
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filter "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          to: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.9-bullseye
    steps:
      - checkout
      - add_ssh_keys:
          # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["ad:75:d1:ff:67:18:7e:07:58:a2:fd:50:27:c5:ad:0b"]
      - attach_workspace:
          at: ~/
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install ansible -y
            apt-get install awscli -y
            apt-get install nodejs -y
            apt-get install npm -y
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
      - run:
          name: compress backend
          command: |
            tar -C backend -czvf artifact.tar.gz .
      - run:
          name: Deploy artefact
          command: |
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            ansible-playbook -i inventory.txt configure-prometheus-node-exporter.yml
      - destroy-environment:
          to: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: python:3.9-bullseye 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install nodejs -y
            apt-get install npm -y
            apt-get install awscli -y
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" --filter "Name=tag:project,Values=udapeople" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            export URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      - destroy-environment:
          to: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: python:3.9-bullseye 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apt-get update -y
            apt-get install nodejs -y
            apt-get install npm -y
            apt-get install awscli -y
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          to: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/project/.circleci/ansible/oldWorkflowId.prime)
            if [[ "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID:10:17}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID:10:17}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [scan-backend]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations, configure-infrastructure]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]