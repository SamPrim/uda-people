version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      parameters:
        to:
          default: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
          type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name <<parameters.to>>

orbs: 
  slack: circleci/slack@4.10.1

jobs:

  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: build front-end project
          command: |
            cd frontend
            npm install
            npm run build
      - slack/notify:
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: build back-end project
          command: |
            cd backend
            npm install
            npm run build
      - slack/notify:
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      
      - restore_cache:
          keys: [test-frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: test-frontend-build

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [test-backend-build]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: test-backend-build

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-frontend]
      - run:
          name: Audit frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
      - save_cache:
          paths: [frontend/node_modules]
          key: scan-frontend

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run:
          name: Audit backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
      - save_cache:
          paths: [backend/node_modules]
          key: scan-backend

#infrastructure 
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            cd ../ansible
            aws ec2 describe-instances --query "Reservations[].Instances[].PublicIpAddress --output text >> inventory.txt" 
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]